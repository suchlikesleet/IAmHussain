// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain_Gamma
#pragma kernel CSMain_Linear

struct Color32 {
    int r;
    int g;
    int b;
    int a;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture



// Input texture
Texture2D<float4> inputTexture;

int textureWidth;

int2 rectPosition;

// Output buffer
//#pragma bind_buffer(name: outputBuffer, binding: 0)
//#pragma bind_buffer(name: outputBufferFloat4, binding: 1)
//#pragma multi_compile __ UNITY_COLORSPACE_GAMMA


RWStructuredBuffer<uint> outputBuffer;
//RWStructuredBuffer<float4> outputBufferFloat4;

float LinearToSRGB(float linearValue)
{
    float threshold = 0.0031308f;
    float a = 0.055f;
    float maxValue = 1.0f;

    // Clamp the input value to the range [0, 1]
    linearValue = saturate(linearValue);

    // Apply inverse gamma encoding
    if (linearValue <= threshold)
    {
        return 12.92f * linearValue;
    }
    else
    {
        return (1.055f * pow(linearValue, 1.0f / 2.4f)) - a;
    }
}

float3 LinearToSRGB3(float3 linearValue)
{
    linearValue.r = LinearToSRGB(linearValue.r);
    linearValue.g = LinearToSRGB(linearValue.g);
    linearValue.b = LinearToSRGB(linearValue.b);
    return linearValue;
}

inline float GammaToLinearSpaceExact(float value)
{
    if (value <= 0.04045F)
        return value / 12.92F;
    else if (value < 1.0F)
        return pow((value + 0.055F) / 1.055F, 2.4F);
    else
        return pow(value, 2.2F);
}


inline half3 GammaToLinearSpace(half3 sRGB)
{
    // Approximate version from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1
    //return sRGB * (sRGB * (sRGB * 0.305306011h + 0.682171111h) + 0.012522878h);

    // Precise version, useful for debugging.
    return half3(GammaToLinearSpaceExact(sRGB.r), GammaToLinearSpaceExact(sRGB.g), GammaToLinearSpaceExact(sRGB.b));
}

inline float LinearToGammaSpaceExact(float value)
{
    if (value <= 0.0F)
        return 0.0F;
    else if (value <= 0.0031308F)
        return 12.92F * value;
    else if (value < 1.0F)
        return 1.055F * pow(value, 0.4166667F) - 0.055F;
    else
        return pow(value, 0.45454545F);
}

inline half3 LinearToGammaSpace(half3 linRGB)
{
    linRGB = max(linRGB, half3(0.h, 0.h, 0.h));
    // An almost-perfect approximation from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1
    //return max(1.055h * pow(linRGB, 0.416666667h) - 0.055h, 0.h);

    // Exact version, useful for debugging.
    return half3(LinearToGammaSpaceExact(linRGB.r), LinearToGammaSpaceExact(linRGB.g), LinearToGammaSpaceExact(linRGB.b));
}

[numthreads(1, 1, 1)]
void CSMain_Gamma(uint3 id : SV_DispatchThreadID)
{
    // Read the color of the first pixel
    float4 colorFloat = inputTexture.Load(int3(id.x + rectPosition.x, id.y + rectPosition.y, 0));

    // Convert float4 to Color32 (single uint)
    uint color = ((uint)round(colorFloat.a * 255.0f) << 24) | ((uint)round(colorFloat.b * 255.0f) << 16) | ((uint)round(colorFloat.g * 255.0f) << 8) | (uint)round(colorFloat.r * 255.0f);

    // Store the color in the output buffer
    outputBuffer[id.x + id.y * textureWidth] = color;
}

[numthreads(1, 1, 1)]
void CSMain_Linear(uint3 id : SV_DispatchThreadID)
{
    float4 colorFloat = inputTexture.Load(int3(id.x + rectPosition.x, id.y + rectPosition.y, 0));

    colorFloat.rgb = LinearToGammaSpace(colorFloat.rgb);

    // Convert float4 to Color32 (single uint)
    uint color = ((uint)round(colorFloat.a * 255.0f) << 24) | ((uint)round(colorFloat.b * 255.0f) << 16) | ((uint)round(colorFloat.g * 255.0f) << 8) | (uint)round(colorFloat.r * 255.0f);

    // Store the color in the output buffer
    outputBuffer[id.x + id.y * textureWidth] = color;
}